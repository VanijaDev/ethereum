{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red202\green202\blue202;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\cssrgb\c83137\c83137\c83137;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 pragma solidity ^0.4.0;\
\
// Proof of Existence contract, version 2\
contract ProofOfExistence2 \{\
    mapping(bytes32 => bool) private proofs;\
\
    // store a proof of existence in the contract state\
        // *transactional function*\
    function storeProof(bytes32 proof) private \{\
        proofs[proof] = true;\
    \}\
\
    // calculate and store the proof for a document\
        // *transactional function*\
    function notarize(string document) public \{\
        bytes32 proof = proofFor(document);\
        storeProof(proof);\
    \}\
\
    // helper function to get a document's sha256\
        // *read-only function*\
    function proofFor(string document) private constant returns (bytes32) \{\
        return sha256(document);\
    \}\
\
    // check if a document has been notarized\
        // *read-only function*\
    function checkDocument(string document) public constant returns(bool) \{\
        bytes32 proof = sha256(document);\
        return hasProof(proof);\
    \}\
\
    // returns true if proof is stored\
        //   *read-only function*\
    function hasProof(bytes32 proof) private constant returns(bool) \{\
        return proofs[proof];\
    \}\
\
\}}